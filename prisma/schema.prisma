// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName         String
  lastName          String
  email             String    @unique
  hashedPassword    String?
  verificationToken String?
  emailVerified     DateTime?
  role              String
  isAdmin           Boolean   @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  serviceProviderProfile ServiceProviderProfile?
  organizerProfile       OrganizerProfile?

  Account Account[]
}

model ServiceProviderProfile {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @unique @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  bio        String?
  skills     String[]
  experience String?

  services Service[]

  favoriteOrganizers FavoriteOrganizer[]
  favoriteEvents     FavoriteEvent[]

  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  FavoriteServiceProvider FavoriteServiceProvider[]
}

model OrganizerProfile {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  userId      String  @unique @db.ObjectId
  user        User    @relation(fields: [userId], references: [id])
  description String?

  events Event[]

  favoriteServiceProviders FavoriteServiceProvider[]
  favoriteServices         FavoriteService[]

  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  FavoriteOrganizer FavoriteOrganizer[]
}

model FavoriteOrganizer {
  id                String                 @id @default(auto()) @map("_id") @db.ObjectId
  serviceProviderId String                 @db.ObjectId
  serviceProvider   ServiceProviderProfile @relation(fields: [serviceProviderId], references: [id])
  organizerId       String                 @db.ObjectId
  organizer         OrganizerProfile       @relation(fields: [organizerId], references: [id])

  @@unique([serviceProviderId, organizerId])
}

model FavoriteEvent {
  id                String                 @id @default(auto()) @map("_id") @db.ObjectId
  serviceProviderId String                 @db.ObjectId
  serviceProvider   ServiceProviderProfile @relation(fields: [serviceProviderId], references: [id])
  eventId           String                 @db.ObjectId
  event             Event                  @relation(fields: [eventId], references: [id])

  @@unique([serviceProviderId, eventId])
}

model FavoriteServiceProvider {
  id          String                 @id @default(auto()) @map("_id") @db.ObjectId
  organizerId String                 @db.ObjectId
  organizer   OrganizerProfile       @relation(fields: [organizerId], references: [id])
  providerId  String                 @db.ObjectId
  provider    ServiceProviderProfile @relation(fields: [providerId], references: [id])

  @@unique([organizerId, providerId])
}

model FavoriteService {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  organizerId String           @db.ObjectId
  organizer   OrganizerProfile @relation(fields: [organizerId], references: [id])
  serviceId   String           @db.ObjectId
  service     Service          @relation(fields: [serviceId], references: [id])

  @@unique([organizerId, serviceId])
}

model Service {
  id               String                 @id @default(auto()) @map("_id") @db.ObjectId
  userId           String                 @db.ObjectId
  user             ServiceProviderProfile @relation(fields: [userId], references: [id])
  title            String
  description      String
  location         String
  category         String
  tagId            String                 @db.ObjectId
  serviceTag       ServiceTag             @relation(fields: [tagId], references: [id])
  currency         String
  pricing          Json
  mainImage        String
  additionalImages String[]
  status           String                 @default("in_review")
  revisionComments Json? // Add this line

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  FavoriteService FavoriteService[]
}

model ServiceCategory {
  id   String       @id @default(auto()) @map("_id") @db.ObjectId
  name String
  tags ServiceTag[]
}

model ServiceTag {
  id         String          @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  category   ServiceCategory @relation(fields: [categoryId], references: [id])
  categoryId String          @db.ObjectId
  services   Service[]
  events     Event[]         @relation(fields: [eventIds], references: [id])
  eventIds   String[]        @db.ObjectId
}

model Event {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  userId      String           @db.ObjectId
  user        OrganizerProfile @relation(fields: [userId], references: [id])
  title       String
  description String
  dateFrom    DateTime
  dateTo      DateTime
  timeFrom    String
  timeTo      String
  location    String

  imageUrls     String[]
  serviceTags   ServiceTag[] @relation(fields: [serviceTagIds], references: [id])
  serviceTagIds String[]     @db.ObjectId

  status           String @default("in_review")
  revisionComments Json? // Add this line

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  FavoriteEvent FavoriteEvent[]
}

model Reservation {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  userId String? @db.ObjectId
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
